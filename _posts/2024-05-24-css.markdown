---
layout: post
title: "CSS"
date: 2024-05-24 00:00:00 +0900
categories: CSS
---

<head>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Hi+Melody&family=Nanum+Brush+Script&family=Nanum+Pen+Script&display=swap" rel="stylesheet" />
</head>

<style>
    .output:link {
        color: blue;
    } 

    .output:visited {
        color: purple;
    }

    .box {
        width: 50px;
        height: 50px;
        background-color: red;
    }

    .hover:hover {
        background-color: blue;
    }

    .active:active {
        background-color: blue;
    }

    .focus:focus {
        background-color: grey;
    }

    .first div:first-child {
        color: red;
    }

    .first div:last-child {
        color: blue;
    }

    .second div:nth-child(2) {
        color: red;
    }

    .second div:nth-child(odd) {
        color: blue;
    }

    .third p:nth-of-type(2){
        color: red;
    }

    .before::before {
        content: "🖤 ";
    }

    .before::after {
        content: " 🧡";
    }

    .para::first-line {
        color: pink;
    }

    .para::first-letter {
        color: red;
        font-weight: bold;
    }

    [title] {
        color: red;
    }   

    h4[title]{
        text-decoration: underline;
    }

    .box2 {
        width: 50px;
        height: 50px;
        border: 1px solid black;
    }

    [class="box2"] {
        background-color: black;
    }

    [class~="red"] {
        background-color: red;
    }

    [class*="Blue"] {
        background-color: blue;
    }

    [class|="dashed"] {
        width: 50px;
        height: 50px;
        border: 1px dashed black;
    }

    [class^="ko"] {
        color: red;
    }

    [class$="se"] {
        color: blue;
    }

    .hi-melody-regular {
        font-family: "Hi Melody", sans-serif;
        font-weight: 400;
        font-style: normal;
    }

    #font-first {
        font-style: italic;
        font-size: 20px;
    }

    #font-second {
        font-family: serif;
        font-weight: normal;
        font-size: 0.8em;
    }

    #font-third {
        font-weight: bold;
    }

    #text-first {
        text-decoration: line-through;
    }

    #text-second {
        text-align: right;
        text-decoration: underline wavy red;
    }

    #text-third {
        text-align: justify;
        text-indent: 10px;
    }
    
    #text-forth {
        letter-spacing: 10px;
        text-shadow: 1px 1px 1px black;
    }

    #text-fifth {
        word-spacing: 15px;
    }

    .list-first {
        list-style-image: url("/public/img/hexagon.png");
        list-style-position: outside;
    }

    .list-second {
        list-style: circle inside;
    }

    .list-first li, .list-second li {
        border: 1px dashed black;
    }

    .box-model {
        float: left;
        width: 100px;
        height: 100px;
        border: 5px solid black;
        padding: 10px;
        align-content: center;
        text-align: center;
        margin: 10px;
    }

    #model1 {
        background-color: skyblue;
        box-sizing: content-box;
    }

    #model2 {
        background-color: pink;
        box-sizing: border-box;
    }

    /* .clear::after {
        content: "";
        display: block;
        clear: both;
    } */
</style>

# CSS

<hr>
<br>

## CSS 적용 방법

HTML 문서의 &lt;head&gt;태그에 &lt;style&gt;태그 작성

```html
<!DOCTYPE html>
<html lang="en">
    <head>
        ...
        <style>
            p {
                color: white;
                font-size: 22px;
                background-color: black;
            }
        </style>
    </head>
    ...
</html>
```

외부의 스타일 파일(.css) 링크

```html
<!DOCTYPE html>
<html lang="en">
    <head>
        ...
        <link rel="stylesheet" href="css/main.css" />
    </head>
    ...
</html>
```

inline 방식

```html
<p style="color: red; background-color: yellow ">인라인 방식</p>
```

외부의 스타일 파일에 또 다른 스타일 파일 링크

**main.css**

```css
@import url(tableStyle.css);

p {
    color: red;
    font-size: 22px;
    text-align: center;
    border: 1px dotted red;
}
```

**sub.css**

```css
table td,
th {
    border: 1px solid black;
}
```

<br>
<hr>
<br>

## 선택자(Selector)

### 기본 선택자

#### 전체 선택자(Universal Selector)

`*`<br>
모든 형태의 모든 요소를 선택

> ex

```css
* {
    margin: 0;
}
```

<br>

#### 태그명 선택자

`태그명`<br>
선택한 태그에 모두 css 적용

> ex

```css
h1 {
    color: red;
    text-align: center;
}
```

<br>

#### ID 선택자

`#`<br>
선택한 id값을 가진 태그에 스타일 적용<br>
태그에 중복된 id를 줄 수 없음

> ex

```css
#first {
    color: red;
}

#second {
    color: blue;
}
```

<br>

#### 클래스 선택자

`.`<br>
선택한 class 값을 가진 <b>모든</b> 태그에 스타일 적용

> ex

```css
.first {
    color: red;
}
```

<br>

#### 그룹 선택자

`선택자, 선택자`<br>

여러 태그에 동일한 스타일 적용

> ex

<!-- prettier-ignore -->
```css
h1, p {
    text-align: center;
}

.first, .second {
    text-align: center;
}
```

<br>

### 복합 선택자

#### 일치 선택자

`기본선택자A기본선택자B`<br>

기본선택자 둘 이상을 이어 씀
두 조건을 모두 만족하는 요소에 스타일 적용

> ex

<!-- prettier-ignore -->
```css
/* carrot 클래스를 가진 span 태그 */
span.carrot {
    color: orange;
}

/* fruit 클래스를 가지고, id값이 apple인 div 태그 */
div.frult#apple {
    color: red;
}
```

<br>

#### 자손 선택자

`기본선택자A 기본선택자B`<br>

기본선택자 둘 이상을 공백으로 구분하여 씀<br>
기본선택자 A 하위의 모든 기본선택자B 조건에 해당하는 요소를 찾아 스타일 적용

> ex

<!-- prettier-ignore -->
```css
/* div 태그 하위의 모든 p 태그 */
div p {
    background-color: skyblue;
}

/* secondDiv 클래스를 가진 요소의 하위 p 태그 */
.secondDiv p {
    color: red;
}
```

<br>

#### 형제 선택자(sibling Selector)

`~`

형제 요소들을 모두 찾아 스타일 적용<br>
기준 요소에는 적용되지 않음

> ex

```html
<ul>
    <li class="firstItem">첫 번째 아이템</li>
    <li>두 번째 아이템</li>
    <li>세 번째 아이템</li>
</ul>
```

```css
/* firstItem 클래스를 가진 li 태그의 형제 요소 */
.firstItem ~ li {
    color: red;
}
```

> 출력

<style>
    .firstList .firstItem ~ li {
    color: red;
    }
</style>

<ul class="firstList">
    <li class="firstItem">첫 번째 아이템</li>
    <li>두 번째 아이템</li>
    <li>세 번째 아이템</li>
</ul>

<br>

#### 인접 형제 선택자(adjacent sibling Selector)

`+`

가장 가까운 형제 요소를 찾아 스타일 적용<br>
기준 요소에는 적용되지 않음

> ex

```html
<ul>
    <li class="firstItem">첫 번째 아이템</li>
    <li>두 번째 아이템</li>
    <li>세 번째 아이템</li>
</ul>
```

```css
.firstItem + li {
    color: blue;
}
```

> 출력

<style>
    .secondList .firstItem + li {
        color: blue;
    }
</style>

<ul class="secondList">
    <li class="firstItem">첫 번째 아이템</li>
    <li>두 번째 아이템</li>
    <li>세 번째 아이템</li>
</ul>

<br>

### 가상 클래스 선택자(pseudo class Selector)

특정 조건이나 상태에 있는 요소를 선택하여 스타일 적용

#### 링크

`:link` 방문하지 않은 링크에 대해 스타일 적용<br>
`:visited` 방문한 링크에 대해 스타일 적용<br>

> ex

```html
<ul>
    <li><a href="https://namu.wiki/w/HTML">HTML</a></li>
    <li><a href="https://namu.wiki/w/CSS?from=css">CSS</a></li>
    <li><a href="https://namu.wiki/w/JS">JS</a></li>
</ul>
```

```css
a:link {
    color: blue;
}
/* 적용 안되는 경우 인터넷 방문 기록 삭제 해보기 */

a:visited {
    color: purple;
}
```

> 출력

<ul>
    <li><a class="output" href="https://namu.wiki/w/HTML">HTML</a></li>
    <li><a class="output" href="https://namu.wiki/w/CSS?from=css">CSS</a></li>
    <li><a class="output" href="https://namu.wiki/w/JS">JS</a></li>
</ul>

<br>

#### hover

`:hover`<br>

요소에 마우스를 올렸을 때 스타일 적용

> ex

```html
<div class="box"></div>
```

```css
.box:hover {
    background-color: blue;
}
```

> 출력

<div class="box hover"></div>

<br>

#### active

`:active`<br>

마우스로 요소를 클릭하는 순간의 스타일 적용

> ex

```html
<div class="box"></div>
```

```css
.box {
    width: 100px;
    height: 100px;
    color: red;
}

.box:active {
    background-color: blue;
}
```

> 출력

<div class="box active"></div>

<br>

#### focus

`:focus`<br>

포커스가 해당 요소에 있을 때 스타일 적용

> ex

```html
<input type="text" />
```

```css
input:focus {
    background-color: grey;
}
```

> 출력

<input class="focus" type="text">

<br>

#### n번째 자식 선택

`:first-child` 첫 번째 자식에게 스타일 적용<br>
`:last-child` 마지막 자식에게 스타일 적용<br>

> ex

```html
<div class="fruits">
    <div>사과</div>
    <div>수박</div>
    <div>오렌지</div>
    <div>블루베리</div>
</div>
```

```css
/* fruits 클래스의 첫 번째 div 요소에 스타일 적용 */
.fruits div:first-child {
    color: red;
}

.fruits div:last-child {
    color: blue;
}
```

> 출력

<div class="fruits first">
    <div>사과</div>
    <div>수박</div>
    <div>오렌지</div>
    <div>블루베리</div>
</div>

<br>

`:nth-child`<br>
n번째 자식에게 스타일 적용<br>

> ex

```css
/* fruits 클래스의 두 번째 div 요소에 스타일 적용 */
.fruits div:nth-child(2) {
    color: red;
}

/* fruits 클래스의 홀수 번 째 div 요소에 스타일 적용 */
.fruits div:nth-child(odd) {
    color: blue;
}
```

> 출력

<div class="fruits second">
    <div>사과</div>
    <div>수박</div>
    <div>오렌지</div>
    <div>블루베리</div>
</div>

<br>

`:nth-of-type`<br>
해당 조건을 가진 자식 중 n 번째 자식에게 스타일 적용<br>

> ex

```html
<div class="fruits">
    <div>사과</div>
    <p>수박</p>
    <div>오렌지</div>
    <p>블루베리</p>
</div>
```

```css
/* fruits 클래스의 두 번째 p 요소에 스타일 적용 */
.fruits p:nth-of-type(2) {
    color: red;
}
```

> 출력

<div class="fruits third">
    <div>사과</div>
    <p>수박</p>
    <div>오렌지</div>
    <p>블루베리</p>
</div>

<br>

### 가상 요소 선택자(pseudo element Selector)

실제 존재하지 않는 가상의 요소를 대상으로 스타일 적용

#### 가상 요소 선택자

`::before` 요소 앞에 스타일 적용<br>
`::after` 요소 뒤에 스타일 적용<br>
`::first-line` 요소 첫 번째 줄에 스타일 적용<br>
`::first-letter` 요소의 첫 번째 글자를 선택<br>

> ex

```html
<h3>Title</h3>
<p>
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Recusandae
    cupiditate animi rem nihil, quod culpa itaque est ad modi. Accusantium sunt
    dolor voluptate corrupti adipisci, tempore dicta quam eum molestias! Lorem
    ipsum dolor sit amet consectetur adipisicing elit.
</p>
```

```css
h3::before {
    content: "🖤 ";
}

h3::after {
    content: " 🧡";
}

p::first-line {
    color: pink;
}

p::first-letter {
    color: red;
    font-weight: bold;
}
```

> 출력

<h3 class="before">Title</h3>
<p class="para">
    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Recusandae
    cupiditate animi rem nihil, quod culpa itaque est ad modi. Accusantium sunt
    dolor voluptate corrupti adipisci, tempore dicta quam eum molestias! Lorem
    ipsum dolor sit amet consectetur adipisicing elit.
</p>

<br>

### 속성 선택자(attributes Selector)

#### 속성 선택자

`[속성]` 특정 속성을 가진 모든 요소 선택<br>
`태그[속성]` 특정 속성을 가진 태그 요소 선택 <br>

> ex

```html
<h3 title="제목">Selector</h3>
<h4 title="부제목">attributes Selector</h4>
```

```css
/* title 속성을 가진 요소에 적용 */
[title] {
    color: red;
}

/* title 속성을 가진 h4 태그 요소에 적용 */
h4[title] {
    text-decoration: underline;
}
```

> 출력

<h3 title="제목">Selector</h3>
<h4 class="no-emoji" title="부제목">attributes Selector</h4>

<br>

`[속성="값"]` 특정 값만을 갖는 속성을 가진 요소 선택<br>
`[속성~="값"]` 특정 값을 갖는 속성을 가진 요소 선택<br>
`[속성*="값"]` 특정 문자열이 포함된 값을 가진 을 가진 요소 선택<br>
`[속성|="값"]` 특정 값이 값이나 값 하이픈(-)... 형식인 <br>

> ex

```html
<div class="box"></div>
<div class="box red"></div>
<div class="box skyBlue"></div>
<div class="dashed-border"></div>
```

```css
.box {
    width: 50px;
    height: 50px;
    border: 1px solid black;
}

/* class 속성의 값으로 "box"만 가진 요소에 적용 */
[class="box"] {
    background-color: black;
}

/* class 속성의 값으로 "red"를 가진 요소에 적용 */
[class~="red"] {
    background-color: red;
}

/* class 속성의 값으로 "blue"를 포함한 스트링을 가진 요소에 적용 */
[class*="Blue"] {
    background-color: blue;
}

/* class 속성의 값으로 "dashed" 나 "dashed-..."형식의 스트링 만을 가진 요소에 적용 */
[class|="dashed"] {
    width: 50px;
    height: 50px;
    border: 1px dashed black;
}
```

> 출력

<div class="box2"></div>
<div class="box2 red"></div>
<div class="box2 skyBlue"></div>
<div class="dashed-border"></div>

<br>

`[속성^="값"]` 속성의 값이 특정 값으로 시작하는 요소를 선택 <br>
`[속성$="값"]` 속성의 값이 특정 값으로 끝나는 요소를 선택<br>

> ex

```html
<div class="korean">한국어</div>
<div class="english">영어</div>
<div class="japanese">영어</div>
<div class="chinese">중국어</div>
```

```css
[class^="ko"] {
    color: red;
}

[class$="se"] {
    color: blue;
}
```

> 출력

<div class="korean">한국어</div>
<div class="english">영어</div>
<div class="japanese">일본어</div>
<div class="chinese">중국어</div>

<br><br>

<hr />

<br>

## 속성

### 텍스트 스타일링

#### 글꼴

`font-family` 글꼴 지정<br>
`font-size` 글자 크기<br>
`font-weight` 글자 굵기<br>
**100~900**<br>
**normal** 보통 폰트, 400과 같음<br>
**bold** 굵은 폰트, 700과 같음<br>

<br>

`font-style` 글자 스타일<br>
**normal** (default)<br>
**italic** 기울임<br>

> ex

```html
<div id="font-first">Lorem ipsum dolor.</div>
<div id="font-second">consectetur adipisicing elit.</div>
<div id="font-third">doloribus deserunt sequi ipsum.</div>
```

```css
#font-first {
    font-style: italic;
    font-size: 20px;
}

#font-second {
    font-family: serif;
    /* font-weight: 400 */
    font-weight: normal;
    /* 부모를 기준으로 크기 설정 */
    font-size: 0.8em;
}

#font-third {
    /* font-weight: 700 */
    font-weight: bold;
}
```

> 출력

<div id="font-first">Lorem ipsum dolor.</div>
<div id="font-second">consectetur adipisicing elit.</div>
<div id="font-third">doloribus deserunt sequi ipsum.</div>

<br>

#### 텍스트

`text-align` 텍스트 정렬<br>
**left**<br>
**right**<br>
**center**<br>
**justify** 양쪽 끝 맞춤<br>

<br>

`text-decoration-line` 텍스트에 줄 긋기<br>
**line-through** 중간 줄<br>
**underline** 밑줄<br>

`text-decoration-style` 줄의 스타일<br>

`text-decoration-color` 줄의 색상<br>

<br>

**text-decoration-line**, **text-decoration-style**, **text-decoration-color** 세 속성을 `text-decoration`로 축약 하여 한 번에 작성 가능<br>
축약시 line, style, color 순서를 지켜야 함

<br>

`text-indent` 들여쓰기<br>
`line-height` 텍스트 높이<br>
`text-shadow` 텍스트 그림자<br>
`letter-spacing` 자간<br>
`word-spacing` 단어 간격<br>

> ex

```html
<div id="text-first">첫 번째 텍스트</div>

<div id="text-second">두 번째 텍스트</div>

<div id="text-third">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac dignissim
    neque. Suspendisse eget ex in dolor dignissim pharetra quis nec orci. Ut sit
    amet mauris id ante sollicitudin elementum vitae vel leo. Duis ut dui a
    ligula euismod dapibus. Orci varius natoque penatibus et magnis dis
    parturient montes, nascetur ridiculus mus. Curabitur aliquam suscipit neque
    ac facilisis. Nullam vel sem purus. Duis at orci fringilla, mattis purus
    quis, varius urna. Aliquam varius dictum augue, a lacinia dui euismod ac.
    Nunc pretium leo eget turpis vehicula ullamcorper. Duis turpis dui,
    elementum id massa a, lobortis tincidunt metus. Aliquam erat volutpat.
    Suspendisse ut mi nec neque tincidunt feugiat. Donec nisl augue, finibus et
    rhoncus at, scelerisque sed diam. Vestibulum vulputate commodo tincidunt.
</div>

<div id="text-forth">네 번째 텍스트</div>

<div id="text-fifth">다섯 번째 텍스트</div>
```

```css
#text-first {
    text-decoration-line: line-through;
}

#text-second {
    text-align: right;
    text-decoration: underline wavy red;
}

#text-third {
    text-align: justify;
    text-indent: 10px;
}

#text-forth {
    letter-spacing: 10px;
    text-shadow: 1px 1px 1px black;
}

#text-fifth {
    word-spacing: 15px;
}
```

> 출력

<div id="text-first">첫 번째 텍스트</div>

<div id="text-second">두 번째 텍스트</div>

<div id="text-third">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac dignissim neque. Suspendisse eget ex in dolor dignissim pharetra quis nec orci. Ut sit amet mauris id ante sollicitudin elementum vitae vel leo. Duis ut dui a ligula euismod dapibus. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Curabitur aliquam suscipit neque ac facilisis. Nullam vel sem purus. Duis at orci fringilla, mattis purus quis, varius urna. Aliquam varius dictum augue, a lacinia dui euismod ac. Nunc pretium leo eget turpis vehicula ullamcorper. Duis turpis dui, elementum id massa a, lobortis tincidunt metus. Aliquam erat volutpat. Suspendisse ut mi nec neque tincidunt feugiat. Donec nisl augue, finibus et rhoncus at, scelerisque sed diam. Vestibulum vulputate commodo tincidunt.
</div>

<div id="text-forth">네 번째 텍스트</div>

<div id="text-fifth">다섯 번째 텍스트</div>

<br>

#### 외부 글꼴 적용 하기

> 눈누, 구글 폰트 등 폰트 사이트 접속 후 폰트 선택<br>

<a href="https://fonts.google.com/">https://fonts.google.com/</a><br>
<a href="https://noonnu.cc/">https://noonnu.cc/</a>

> 폰트 리소스 불러오기

방법1) &lt;link&gt; 태그 사용

&lt;head&gt; 태그 안에 가져온 embed code를 붙여넣기

```html
<head>
    ...
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Hi+Melody&family=Nanum+Brush+Script&family=Nanum+Pen+Script&display=swap"
        rel="stylesheet"
    />
</head>
```

방법2) stylesheet에 추가

&lt;head&gt; 태그나 stylesheet 파일에 붙여넣기

```css
@import url("https://fonts.googleapis.com/css2?family=Hi+Melody&family=Nanum+Brush+Script&family=Nanum+Pen+Script&family=Noto+Sans+KR:wght@100..900&display=swap");
```

> 사용하기

```css
.hi-melody-regular {
    font-family: "Hi Melody", sans-serif;
    font-weight: 400;
    font-style: normal;
}
```

```html
<div class="hi-melody-regular">
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate
    reprehenderit quibusdam amet beatae suscipit, voluptas iure corporis eum et
    temporibus in aperiam voluptates necessitatibus sint sequi at pariatur.
    Dolore, quas?
</div>
```

> 출력

<div class="hi-melody-regular">
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate
    reprehenderit quibusdam amet beatae suscipit, voluptas iure corporis eum et
    temporibus in aperiam voluptates necessitatibus sint sequi at pariatur.
    Dolore, quas?
</div>

<br>

### 리스트 스타일링

#### 마커 스타일

`list-style-image`<br>
`list-style-position`<br>
**inside**: 마커가 리스트 공간 내부에 위치<br>
**outside**: 마커가 리스트 공간 외부에 위치<br> <br>

`list-style-type`<br>
**disc**(default)<br>
**circle**<br>
**lower-alpha**<br>
**upper-alpha**<br>
**lower-roman**<br>
**upper-roman**<br>

<br>

**list-style-image**, **list-style-position**, **list-style-type** 세 속성을 `list-style`로 축약 하여 한 번에 작성 가능<br>
축약시 순서는 중요하지 않음

> ex

```html
<ul class="list-first">
    <li>짜장면</li>
    <li>짬뽕</li>
    <li>볶음밥</li>
    <li>탕수육</li>
</ul>

<ul class="list-second">
    <li>짜장면</li>
    <li>짬뽕</li>
    <li>볶음밥</li>
    <li>탕수육</li>
</ul>
```

<!-- prettier-ignore -->
```css
.list-first {
    list-style-image: url("/public/img/hexagon.png");
    list-style-position: outside;
}

.list-second {
    list-style: circle inside;
}

.list-first li, .list-second li {
    border: 1px dashed black;
}
```

> 출력

<ul class="list-first">
    <li>짜장면</li>
    <li>짬뽕</li>
    <li>볶음밥</li>
    <li>탕수육</li>
</ul>

<ul class="list-second">
    <li>짜장면</li>
    <li>짬뽕</li>
    <li>볶음밥</li>
    <li>탕수육</li>
</ul>

<br><br>

## 박스 모델

### 박스 모델이란?

요소가 웹 페이지에서 차지하는 공간을 정의한 모델

### 박스의 구성요소와 속성

<img src="/public/img/box-model.png" /><br>

`컨텐츠(Content)` 실제로 텍스트나 이미지가 들어가는 영역<br>
**width**<br>
**height**<br>

<br>

`패딩(padding)` 콘텐츠 주위의 여백, 콘텐츠와 보더 사이의 공간<br>
**padding-top**<br>
**padding-right**<br>
**padding-bottom**<br>
**padding-left**<br>

<br>

**padding-top, padding-right**, **padding-bottom**, **padding-left** 네 속성을 `padding` 으로 축약 하여 한 번에 작성 가능<br>
축약시 top, right- bottom, left 순서를 지켜야 함

<br>

`보더(Border)` 보더(Border): 패딩과 마진 사이의 테두리<br>
**border-width**<br>
**border-style**<br>
**border-color**<br>

<br>

**border-width, border-style**, **border-color** 세 속성을 `border` 으로 축약 하여 한 번에 작성 가능<br>
**border-left-width**, **border-left-style**, **border-left-color** 처럼 한 면에만 속성을 줄 수 있고 역시 `border-left` 로 축약 가능<br>

축약시 width, style, color 순서를 지켜야 함

<br>

`마진(Margin)` 요소와 요소 사이의 외부 여백, 보더 바깥의 공간<br>
**margin-top**<br>
**margin-right**<br>
**margin-bottom**<br>
**margin-left**<br>

<br>

**margin-top, margin-right**, **margin-bottom**, **margin-left** 네 속성을 `margin` 으로 축약 하여 한 번에 작성 가능<br>
축약시 top, right- bottom, left 순서를 지켜야 함

### 크기에 대한 속성

`box-sizing`<br>

**border-box**: 요소의 너비와 높이가 border 까지 포함 <br>
**content-box(default)**: 요소의 너비와 높이가 콘텐츠 영역만을 포함<br>

> ex

```html
<div class="box" id="box1">Content</div>
<div class="box" id="box2">Content</div>
```

```css
.box {
    float: left;
    width: 100px;
    height: 100px;
    border: 5px solid black;
    padding: 10px;
    align-content: center;
    text-align: center;
    margin: 10px;
}

#box1 {
    background-color: skyblue;
    box-sizing: content-box;
}

#box2 {
    background-color: pink;
    box-sizing: border-box;
}
```

> 출력

<style>
   
</style>

<div class="clear">
    <div class="box-model" id="model1">Content</div>
    <img src="/public/img/box-model1.png" />
</div>

<br>

<div class="clear">
    <div class="box-model" id="model2">Content</div>
    <img src="/public/img/box-model2.png">
</div>

<br>

`max-width` 최대 너비<br>
`min-width` 최소 너비<br>

<br>
<hr>
<br>

#### 블록요소와 인라인 요소

**블럭 요소(Block-Level Elements)**

-   부모 요소의 전체 가로 너비를 차지
-   각 요소는 새로운 줄에서 만들어짐
-   다른 블록 요소 및 인라인 요소 포함 가능
-   크기 조정 가능

<br>

**인라인 요소(Inline-Level Elements)**

-   요소 내용만큼의 가로 너비를 차지
-   각 요소는 같은 줄에서 나란히 만들어짐
-   다른 인라인 요소만 포함 가능
-   크기 조정 제한(세로 방향 margin, padding 사용 가능)

테스트
