---
layout: post
title: "this"
date: 2024-06-20 00:00:00 +0900
categories: javaScript
---

<!--
## this

### 전역 문맥

### 함수 문맥
-->

## this

함수가 호출되는 문맥(context)를 참조

### 전역 문맥(Global Context)

전역 문맥에서 `this`는 전역 객체를 가리킴

```javascript
console.log(this); // window 객체
```

<br>

### 함수 문맥(Function Context)

#### 일반 함수

일반 함수 호출에서 `this`는 전역 객체를 가리킴

```javascript
function func1() {
    console.log(this); // window 객체
}

func1();
```

#### 메서드

객체의 메서드에서 `this`는 해당 메서드를 호출한 객체를 가리킴

```javascript
const account = {
    owner: "홍길동",
    accNum: "111-222-333333",
    balance: 5000000,

    checkBalance: function () {
        console.log(this.balance);
    },
};

account.checkBalance(); // 5000000
```

#### 생성자 함수

생성자 함수에서 `this`는 새로 생성된 객체 참조

```javascript
function Account(owner, accNum, balance) {
    this.owner = owner;
    this.accNum = accNum;
    this.balance = balance;

    this.checkBalance = function () {
        console.log(this.balance);
    };
}

const account1 = new Account("홍길동", "111-222-333333", 5000000);

console.log(account1.owner); // "홍길동"
```

#### 화살표 함수

화살표 함수에서의 `this`는 함수가 정의된 스코프에서 `this` 값을 참조

```javascript
// 함수가 정의된 전역 객체를 참조(window 객체)
const account = {
    owner: "홍길동",
    accNum: "111-222-333333",
    balance: 5000000,

    checkBalance: () => console.log(this.balance),
};

account.checkBalance(); // undefined
```

#### 이벤트 핸들러

이벤트 핸들러에서 `this`는 이벤트를 발생시킨 요소를 가리킴

```javascript
document.querySelector("button").addEventListener("click", function () {
    console.log(this); // <button>버튼</button>
});
```

```html
<button>버튼</button>
```
